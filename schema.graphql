input CreateExerciseInput {
  muscleGroup: String
  name: String!
  type: String!
}

input CreateWorkoutInput {
  name: String!
  workoutExercises: [ExerciseOptionInput!]!
}

scalar DateTime

input DoneWorkoutExerciseInput {
  id: String!
  sets: [DoneWorkoutExerciseSetInput!]!
}

input DoneWorkoutExerciseSetInput {
  lbs: Int
  mins: Int
  reps: Int
}

type Exercise {
  id: ID!
  muscleGroup: String
  name: String!
  type: String!
}

input ExerciseOptionInput {
  id: String!
}

input GetItDoneInput {
  workoutExercises: [DoneWorkoutExerciseInput!]!
}

type GetWorkoutDoneResult {
  workout: Workout!
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  createExercise(input: CreateExerciseInput!): Exercise!
  createWorkout(input: CreateWorkoutInput!): Workout!
  getWorkoutDone(data: GetItDoneInput!, workoutId: ID!): GetWorkoutDoneResult!
  login(input: LoginInput!): User!
  signUp(input: SignUpInput!): User!
}

interface Node {
  id: ID!
}

type Query {
  exercises: [Exercise!]!
  hello(name: String!): String!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  workout(id: ID!): Workout!
  workouts: [Workout!]!
}

input SignUpInput {
  name: String!
  password: String!
  username: String!
}

type User {
  id: ID!
  name: String!
  username: String!
}

type Workout implements Node {
  createdAt: DateTime!
  doneAt: DateTime
  id: ID!
  name: String!
  status: String!
  workoutExercises: [WorkoutExercise!]!
}

type WorkoutExercise {
  exercise: Exercise!
  id: ID!
  sets: [WorkoutSet!]!
}

type WorkoutSet {
  id: ID!
  lbs: Int
  mins: Int
  reps: Int
}