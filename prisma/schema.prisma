generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator giraphql {
  provider = "prisma-giraphql-types"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id               String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  username         String            @unique(map: "username_1")
  name             String
  hashedPassword   Bytes
  createdAt        DateTime          @default(now()) @db.Date
  updatedAt        DateTime          @updatedAt @db.Date
  sessions         Session[]
  workouts         Workout[]
  workoutExercises WorkoutExercise[]
}

model Session {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  expiresAt DateTime @db.Date
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

enum ExerciseType {
  AEROBIC
  STRENGTH
}

enum MuscleGroup {
  ARMS
  SHOULDERS
  CHEST
  BACK
  LEGS
}

model Exercise {
  id               String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name             String            @unique(map: "name_1")
  type             ExerciseType
  muscleGroup      MuscleGroup?
  createdAt        DateTime          @default(now()) @db.Date
  updatedAt        DateTime          @updatedAt @db.Date
  workoutExercises WorkoutExercise[]
}

model WorkoutSet {
  id                String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
  mins              Int?
  lbs               Int?
  reps              Int?
  createdAt         DateTime         @default(now()) @db.Date
  updatedAt         DateTime         @updatedAt @db.Date
  workoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String?          @db.ObjectId
}

model WorkoutExercise {
  id         String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sets       WorkoutSet[]
  createdAt  DateTime     @default(now()) @db.Date
  updatedAt  DateTime     @updatedAt @db.Date
  workout    Workout      @relation(fields: [workoutId], references: [id])
  workoutId  String       @db.ObjectId
  exercise   Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  userId     String       @db.ObjectId
}

enum WorkoutStatus {
  DRAFTED
  NONE
}

model Workout {
  id               String            @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name             String
  status           WorkoutStatus     @default(DRAFTED)
  doneAt           DateTime?         @db.Date
  createdAt        DateTime          @default(now()) @db.Date
  updatedAt        DateTime          @updatedAt @db.Date
  workoutExercises WorkoutExercise[]
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
}
