generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator pothos {
  provider = "prisma-pothos-types"
}

model User {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  username         String            @unique
  hashedPassword   Bytes
  session          Session[]
  exercises        Exercise[]
  workoutExercises WorkoutExercise[]
  workouts         Workout[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum ExerciseType {
  AEROBIC
  STRENGTH
}

enum MuscleGroup {
  ARMS
  SHOULDERS
  CHEST
  BACK
  LEGS
}

model Exercise {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  type        ExerciseType @default(AEROBIC)
  muscleGroup MuscleGroup?

  user             User              @relation(fields: [userId], references: [id])
  userId           String
  workoutExercises WorkoutExercise[]

  @@unique([userId, name])
}

model WorkoutSet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mins     Int @default(0)
  distance Int @default(0)
  kcal     Int @default(0)

  lbs  Int @default(0)
  reps Int @default(0)

  workoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String?
}

model WorkoutExercise {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int
  sets  WorkoutSet[]

  workout    Workout? @relation(fields: [workoutId], references: [id])
  workoutId  String?
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

enum WorkoutStatus {
  DRAFTED
  DONE
}

model Workout {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  status           WorkoutStatus     @default(DRAFTED)
  completedAt      DateTime?
  workoutExercises WorkoutExercise[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
